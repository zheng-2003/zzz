<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到阿正的博客</title>
  
  
  <link href="https://zhaozheng.link/atom.xml" rel="self"/>
  
  <link href="https://zhaozheng.link/"/>
  <updated>2021-04-28T03:57:37.000Z</updated>
  <id>https://zhaozheng.link/</id>
  
  <author>
    <name>阿正</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx部署django项目</title>
    <link href="https://zhaozheng.link/CentOS%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE/"/>
    <id>https://zhaozheng.link/CentOS%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-04-21T16:00:00.000Z</published>
    <updated>2021-04-28T03:57:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整体流程共分为nginx部署django和nginx部署vue"><a href="#整体流程共分为nginx部署django和nginx部署vue" class="headerlink" title="整体流程共分为nginx部署django和nginx部署vue"></a>整体流程共分为nginx部署django和nginx部署vue</h2><p><img src= "/img/loading1.gif" data-lazy-src="https://i.loli.net/2021/04/28/jOLc8UglmKSrQMD.png" alt="部署项目流程.png"></p><h3 id="django项目配置"><a href="#django项目配置" class="headerlink" title="django项目配置"></a>django项目配置</h3><p>在settings.py文件中配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">True</span> <span class="comment"># 暂时开着</span></span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置静态资源目录，后面部署会用到 </span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="将django项目中所需要的环境进行打包"><a href="#将django项目中所需要的环境进行打包" class="headerlink" title="将django项目中所需要的环境进行打包"></a>将django项目中所需要的环境进行打包</h3><p>需要进入项目下进行环境的打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirement.txt</span><br></pre></td></tr></table></figure><p>效果图<br><img src= "/img/loading1.gif" data-lazy-src="https://i.loli.net/2021/04/22/g9kImitHxG6yalp.png" alt="打包requirement.png"></p><p>可以使用filezilla上传到CentOS云主机上,p8_workorder为我的项目<br><img src= "/img/loading1.gif" data-lazy-src="https://i.loli.net/2021/04/22/VRDHB1WQgzOxL3U.png" alt="上传项目到云主机.png"></p><p>cd进入到我的项目目录中</p><h3 id="安装所需要的环境与配置uwsgi"><a href="#安装所需要的环境与配置uwsgi" class="headerlink" title="安装所需要的环境与配置uwsgi"></a>安装所需要的环境与配置uwsgi</h3><p>安装所需要的环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果你的安装是pip请使用pip安装，我的是pip3</span></span><br><span class="line">pip3 install -r requirement.txt</span><br></pre></td></tr></table></figure><p>我们还需要uwsgi协议进行后续的部署，但是直接安装uwsgi会报异常</p><p>我们需要yum安装相应的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc* pcre-devel openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据你安装python的名称来决定安装，比如我启动python是用python3来启动，所以我的安装是这样的</span></span><br><span class="line">yum install python3-devel -y</span><br></pre></td></tr></table></figure><p>现在我们就可以安装uwsgi协议了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install uwsgi</span><br></pre></td></tr></table></figure><p>接下来我们需要执行命令来覆盖我们配置的静态资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py collectstatic</span><br></pre></td></tr></table></figure><p>接下来创建一个conf目录来存放我们的django部署配置文件</p><p><img src= "/img/loading1.gif" data-lazy-src="https://i.loli.net/2021/04/23/tJn4gIufy19DKEC.png" alt="静态资源和配置.png"></p><p>后续会把static静态目录的资源部署到nginx上，先不急，先写配置文件</p><p>cd进入conf开始编写配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi uwsgi.ini</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> http = 192.168.12.214:8000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我是使用socket进行端口映射，映射到django的配置文件上(ip是我内网的IP，用来做端口映射)</span></span><br><span class="line">socket = 172.24.10.233:8800</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我的项目根目录位置，如果不知道具体位置可以在项目根目录进行<span class="built_in">pwd</span>查看</span></span><br><span class="line">chdir = /home/django_nginx/p8_workorder/</span><br><span class="line"></span><br><span class="line">wsgi-file = p8_workorder/wsgi.py</span><br><span class="line"><span class="meta">#</span><span class="bash"> 主线程开启</span></span><br><span class="line">master = true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启进程的个数</span></span><br><span class="line">processes = 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 线程个数</span></span><br><span class="line">threads = 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志文件所在位置</span></span><br><span class="line">logto = /home/django_nginx/p8_workorder/conf/worker.log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件位置同上</span></span><br><span class="line">pidfile = /home/django_nginx/p8_workorder/conf/worker.pid</span><br><span class="line"></span><br><span class="line">buffer-size = 65536</span><br></pre></td></tr></table></figure><p>完成之后启动uwsgi查看</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure><p>浏览器访问ip和端口进行查看</p><h3 id="nginx部署静态资源及django配置"><a href="#nginx部署静态资源及django配置" class="headerlink" title="nginx部署静态资源及django配置"></a>nginx部署静态资源及django配置</h3><p>我们需要把刚才的static静态目录部署到nginx.conf中,首先进入我nginx.conf所在目录下<br>由于我的nginx是使用源码wget安装的，yum安装则需要到/etc目录下去找<br><img src= "/img/loading1.gif" data-lazy-src="https://i.loli.net/2021/04/23/AXz3fZLlv4TiatS.png" alt="进入nginx.png"></p><p>我是在conf目录下又创建了一个conf目录，用来存放django.conf配置的，所以我在nginx.conf<br>中写了这条语句,如果使用yum安装的nginx请忽略此步骤</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /usr/local/nginx/conf/conf/*.conf;</span><br></pre></td></tr></table></figure><p>cd 进入新建的conf中配置django.conf</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd conf</span><br><span class="line"></span><br><span class="line">vi django.conf</span><br></pre></td></tr></table></figure><p>在django.conf中做以下配置</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">upstream fanxiang&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置负载均衡，此处为django配置uwsgi映射的端口，与uwsgi中映射端口要一致</span></span><br><span class="line">   server 172.24.10.233:8800;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    # 监听端口</span><br><span class="line">    listen     8000;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line"></span><br><span class="line">      include uwsgi_params; # 使用 uwsgi协议</span><br><span class="line">      uwsgi_pass fanxiang; # 反向代理，配置连接django应用服务器</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    # 此处配置静态目录</span><br><span class="line">    location /static/ &#123;</span><br><span class="line">            # 一种是根路径配置，一种是别名配置，任何一种都可以(不要在语句后注释，可能会导致在同一行注释到后面的配置，从而访问不到静态资源)</span><br><span class="line">            # root /home/django_nginx/p8_workorder;                  </span><br><span class="line">           alias /home/django_nginx/p8_workorder/static/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成后进入项目的uwsgi.ini配置的目录，重启</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini &amp;</span><br></pre></td></tr></table></figure><p>重启nginx服务</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><h3 id="负载均衡的几种方式"><a href="#负载均衡的几种方式" class="headerlink" title="负载均衡的几种方式"></a>负载均衡的几种方式</h3><h4 id="1、轮询（默认）"><a href="#1、轮询（默认）" class="headerlink" title="1、轮询（默认）"></a>1、轮询（默认）</h4><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><h4 id="2、weight-（权重）"><a href="#2、weight-（权重）" class="headerlink" title="2、weight （权重）"></a>2、weight （权重）</h4><p>按照不同比重进行资源的处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream jiyun &#123;</span><br><span class="line"></span><br><span class="line">   server  127.0.0.1:8800 weight&#x3D;1;</span><br><span class="line">   server  127.0.0.1:8801 weight&#x3D;2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>经过测试，8801接收到的请求个数 比 8800多一倍</p><h4 id="3、ipHash进行分配"><a href="#3、ipHash进行分配" class="headerlink" title="3、ipHash进行分配"></a>3、ipHash进行分配</h4><p>通过hash算法来计算处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream jiyun &#123;</span><br><span class="line">   ip_hash;</span><br><span class="line">   server 127.0.0.1:8800;</span><br><span class="line">   server 127.0.0.1:8801;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正向代理与反向代理"><a href="#正向代理与反向代理" class="headerlink" title="正向代理与反向代理"></a>正向代理与反向代理</h3><p><img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdn.net/20170702105958247?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzU1NjgwOTk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="正向代理与反向代理"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;整体流程共分为nginx部署django和nginx部署vue&quot;&gt;&lt;a href=&quot;#整体流程共分为nginx部署django和nginx部署vue&quot; class=&quot;headerlink&quot; title=&quot;整体流程共分为nginx部署django和nginx部署vu</summary>
      
    
    
    
    
    <category term="CentOS" scheme="https://zhaozheng.link/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>nginx部署vue项目</title>
    <link href="https://zhaozheng.link/nginx%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/"/>
    <id>https://zhaozheng.link/nginx%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-04-19T16:00:00.000Z</published>
    <updated>2021-04-23T13:06:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、配置vue目录"><a href="#1、配置vue目录" class="headerlink" title="1、配置vue目录"></a>1、配置vue目录</h3><p>在vue项目config/index.js文件中 找到</p><p>build部分的assetsPublicPath  修改值为”./“</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">        &#x2F;&#x2F; Template for index.html</span><br><span class="line">        index: path.resolve(__dirname, &#39;..&#x2F;dist&#x2F;index.html&#39;),</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Paths</span><br><span class="line">        assetsRoot: path.resolve(__dirname, &#39;..&#x2F;dist&#39;),</span><br><span class="line">        assetsSubDirectory: &#39;static&#39;,</span><br><span class="line">        assetsPublicPath: &#39;.&#x2F;&#39;, &#x2F;&#x2F;改这里</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * Source Maps</span><br><span class="line">         *&#x2F;</span><br></pre></td></tr></table></figure><p>vue项目开发完以后，部署之前需要 先打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>会在vue根目录下生成一个 dist目录</p><p>这个就是要部署的部分 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- dist</span><br><span class="line">-- static</span><br><span class="line">-- index.html</span><br></pre></td></tr></table></figure><h3 id="2、部署conf文件"><a href="#2、部署conf文件" class="headerlink" title="2、部署conf文件"></a>2、部署conf文件</h3><p>我们需要可以在/home/目录下新建一个目录,用来存放部署的dist，可以通过filezilla连接获取到dist</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;home&#x2F;vue_nginx</span><br></pre></td></tr></table></figure><p>然后cd进入 /usr/local/nginx/conf/下创建一个目录来存放配置的vue.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir conf</span><br><span class="line"></span><br><span class="line">cd &#x2F;conf</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;进入vue.conf进行以下文件的配置</span><br><span class="line">vi vue.conf</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8080;  # 此处修改为部署的vue端口号</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;home&#x2F;vue_nginx&#x2F;dist;    #指定文件目录下部署的dist</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              &#x2F;404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  &#x2F;scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&#39;s document root</span><br><span class="line">    # concurs with nginx&#39;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ &#x2F;\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改完这两处退出,重启nginx服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><hr><p><strong>温馨提示：如果你是使用源码进行安装，而不是yum安装，则需要先进行以下systemctl的设置(如果使用yum安装请忽略以下步骤)</strong></p><h4 id="centos7中设置nginx的systemctl启动方式"><a href="#centos7中设置nginx的systemctl启动方式" class="headerlink" title="centos7中设置nginx的systemctl启动方式"></a>centos7中设置nginx的systemctl启动方式</h4><h5 id="1-建立服务文件"><a href="#1-建立服务文件" class="headerlink" title="1.建立服务文件"></a>1.建立服务文件</h5><p>（1）文件路径</p><p>vim /usr/lib/systemd/system/nginx.service</p><p>（2）将以下内容写入文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"></span><br><span class="line">Description&#x3D;nginx - high performance web server</span><br><span class="line"></span><br><span class="line">After&#x3D;network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Type&#x3D;forking</span><br><span class="line"></span><br><span class="line">ExecStart&#x3D;&#x2F;opt&#x2F;nginx&#x2F;sbin&#x2F;nginx</span><br><span class="line"></span><br><span class="line">ExecReload&#x3D;&#x2F;opt&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span><br><span class="line"></span><br><span class="line">ExecStop&#x3D;&#x2F;opt&#x2F;nginx&#x2F;sbin&#x2F;nginx -s stop</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"></span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><h5 id="2-使服务生效"><a href="#2-使服务生效" class="headerlink" title="2.使服务生效"></a>2.使服务生效</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h5 id="3-重启服务"><a href="#3-重启服务" class="headerlink" title="3.重启服务"></a>3.重启服务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h3 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h3><p><strong>centos启动Nginx提示nginx: [emerg] still could not bind()</strong></p><p>如果遇到以上问题，可能是进程占用原因</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@8.131.52.82 ~]# systemctl restart nginx</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:8080 failed (98: Address already in use)</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:8080 failed (98: Address already in use)</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:8080 failed (98: Address already in use)</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:8080 failed (98: Address already in use)</span><br><span class="line">nginx: [emerg] bind() to 0.0.0.0:8080 failed (98: Address already in use)</span><br><span class="line">nginx: [emerg] still could not bind()</span><br></pre></td></tr></table></figure><p><strong>解决办法：</strong></p><p>根据Nginx配置文件查看配置的端口（本文中使用的是80端口），然后根据端口查看端口占用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@xyw-cyck-cms-3 ~]# netstat -ntlp|grep 8080  </span><br><span class="line">tcp        0      0 0.0.0.0:8080              0.0.0.0:*               LISTEN      7043/nginx: worker</span><br></pre></td></tr></table></figure><p>使用kill命令杀死占用进程，之后重新启动Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 7043</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、配置vue目录&quot;&gt;&lt;a href=&quot;#1、配置vue目录&quot; class=&quot;headerlink&quot; title=&quot;1、配置vue目录&quot;&gt;&lt;/a&gt;1、配置vue目录&lt;/h3&gt;&lt;p&gt;在vue项目config/index.js文件中 找到&lt;/p&gt;
&lt;p&gt;build部分</summary>
      
    
    
    
    
    <category term="CentOS" scheme="https://zhaozheng.link/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>gitee提交到他人仓库</title>
    <link href="https://zhaozheng.link/gitee%E6%8F%90%E4%BA%A4%E5%88%B0%E4%BB%96%E4%BA%BA%E4%BB%93%E5%BA%93/"/>
    <id>https://zhaozheng.link/gitee%E6%8F%90%E4%BA%A4%E5%88%B0%E4%BB%96%E4%BA%BA%E4%BB%93%E5%BA%93/</id>
    <published>2021-04-12T12:00:33.941Z</published>
    <updated>2021-04-12T12:01:34.824Z</updated>
    
    <content type="html"><![CDATA[<p>前言</p><p>一直使用 idea 克隆和上传提交项目，今天需要把项目上传到另外一个仓库中，发现 Git bash 操作都忘了如何上传项目了，所以准备在这里记录一下，不太常用，一般是换电脑的时候用用。</p><p>关键字：Git、gitee、gitbash</p><p>一、新建一个本地文件夹仓库</p><p>名字随意，说白了就是一个新建文件夹(如果你的项目没有被 Git 管理过，可以就用当前项目文件夹作为仓库，我这里被管理过了，想上传到另外的仓库所以就新建了)</p><p>二、在当前文件夹点击右键，进入 gitbash(没有的需要百度下载)</p><p>三、执行初始化语句，让这个普通文件夹不再普通(说人话就是，让这个文件夹被 git 所管理)</p><p>$ git init</p><p>Initialized empty Git repository in D:/workplace/cnjy-parent/.git/</p><p>成功后会出现一个 .git 的隐藏文件夹</p><p>四、把你需要上传的文件夹拷贝到这个新建的文件夹中</p><p>由于我是把项目重新上传到另外一个仓库，所以我把我以前文件夹中的除了 .git 文件夹除外的所有东西拷贝到新文件夹了</p><p>以自己的为准</p><p>五、添加到缓存区</p><p>$ git add . // .代表所有文件都添加</p><p>六、提交到本地仓库</p><p>$ git commit -m “chuniao” // 引号里面是备注信息，随便写</p><p>七、关联远程仓库</p><p>1、gitee 新建仓库</p><p>然后创建一个和文件夹同名的仓库</p><p>2、复制地址</p><p>复制你gitee上的地址</p><p>3、执行关联命令</p><p>$ git remote add origin 是刚刚复制的地址</p><p>八、如果 gitee 仓库创建的额时候有 README.MD 文件，则先拉取代码，如果仓库是空的则跳过</p><p>$ git pull –rebase origin master</p><p>九、提交到远程仓库</p><p>git push -u origin master</p><p>十、查看远程仓库</p><p>此时就能看到远程仓库里有刚刚提交到的代码了</p><p>总结</p><p>本来 idea 也可以上传代码到远程仓库的，github、gitee 差不多，但是如果已经控制的版本，经常会遇到一些预料不到的错误情况，这个时候就需要用到 gitbash 了，亦可以都用 gitbash，比 idea 的功能齐全嘛，所以也有必要掌握一下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;一直使用 idea 克隆和上传提交项目，今天需要把项目上传到另外一个仓库中，发现 Git bash 操作都忘了如何上传项目了，所以准备在这里记录一下，不太常用，一般是换电脑的时候用用。&lt;/p&gt;
&lt;p&gt;关键字：Git、gitee、gitbash&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="gitee" scheme="https://zhaozheng.link/tags/gitee/"/>
    
  </entry>
  
  <entry>
    <title>Django中自动生成接口文档</title>
    <link href="https://zhaozheng.link/Django%E4%B8%AD%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
    <id>https://zhaozheng.link/Django%E4%B8%AD%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</id>
    <published>2021-03-11T16:00:00.000Z</published>
    <updated>2021-05-12T08:02:02.113Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、给项目自动生成接口文档"><a href="#1、给项目自动生成接口文档" class="headerlink" title="1、给项目自动生成接口文档"></a>1、给项目自动生成接口文档</h3><p>第一步：需要下载一个包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install coreapi</span><br></pre></td></tr></table></figure><p>第二步：配置文档路由</p><p>在主urls中，配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from rest_framework.documentation import include_docs_urls</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&quot;docs&#x2F;&quot;,include_docs_urls(title&#x3D;&quot;工单流接口文档&quot;))</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三步： 在setting中配置一个协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">    &#39;DEFAULT_SCHEMA_CLASS&#39;: &#39;rest_framework.schemas.coreapi.AutoSchema&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后访问路由即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、给项目自动生成接口文档&quot;&gt;&lt;a href=&quot;#1、给项目自动生成接口文档&quot; class=&quot;headerlink&quot; title=&quot;1、给项目自动生成接口文档&quot;&gt;&lt;/a&gt;1、给项目自动生成接口文档&lt;/h3&gt;&lt;p&gt;第一步：需要下载一个包&lt;/p&gt;
&lt;figure cl</summary>
      
    
    
    
    
    <category term="CentOS" scheme="https://zhaozheng.link/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Java泛型之上、下边界通配符的理解(适合初学)</title>
    <link href="https://zhaozheng.link/Java%E6%B3%9B%E5%9E%8B%E4%B9%8B%E4%B8%8A%E3%80%81%E4%B8%8B%E8%BE%B9%E7%95%8C%E9%80%9A%E9%85%8D%E7%AC%A6%E7%9A%84%E7%90%86%E8%A7%A3-%E9%80%82%E5%90%88%E5%88%9D%E5%AD%A6/"/>
    <id>https://zhaozheng.link/Java%E6%B3%9B%E5%9E%8B%E4%B9%8B%E4%B8%8A%E3%80%81%E4%B8%8B%E8%BE%B9%E7%95%8C%E9%80%9A%E9%85%8D%E7%AC%A6%E7%9A%84%E7%90%86%E8%A7%A3-%E9%80%82%E5%90%88%E5%88%9D%E5%AD%A6/</id>
    <published>2020-09-02T11:15:25.000Z</published>
    <updated>2021-03-17T13:07:04.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="泛型的由来"><a href="#泛型的由来" class="headerlink" title="泛型的由来"></a>泛型的由来</h2><h3 id="为什么需要泛型"><a href="#为什么需要泛型" class="headerlink" title="为什么需要泛型"></a>为什么需要泛型</h3><p>&emsp;&emsp;Java的数据类型一般都是在定义时就需要确定，这种强制的好处就是类型安全，不会出现像弄一个ClassCastException的数据给jvm，数据安全那么执行的class就会很稳定。但是假如说我不知道这个参数要传什么类型的，因为公司需求在变，如果写死的那就只能便以此需求就改一次，很麻烦。sun公司也注意到这个问题，这样会让代码的灵活性降低，他们就研究出了泛型。</p><h3 id="泛型初识"><a href="#泛型初识" class="headerlink" title="泛型初识"></a>泛型初识</h3><p>&emsp;&emsp;什么是泛型，可以字面理解就是一个泛泛的类型，他是不确定的，在Java代码编译的时候用泛型是不会出错的，而在运行期时就会报错，说你这种第一是不合理的。这是为什么呢。因为为了提高灵活性，就在编译时期将条件放宽，但是泛型一定要在运行的时候告诉jvm你给我的数据到底是什么类型的，否则jvm会是懵逼的。所以泛型的好处就是将类型的灵活性提高，也只是在Java语法的基础上提高，不过泛型还是比较实用的。</p><h3 id="何时使用泛型"><a href="#何时使用泛型" class="headerlink" title="何时使用泛型"></a>何时使用泛型</h3><p>&emsp;&emsp;泛型的应用场景就是应用在模型（可以理解为存储数据的盒子），我为了这个盒子适用更多的地方我就用将需要存入的数据用一个泛型表示，当然可以传入多值。如果是相同类型的对象就用一个泛型的数组比较好，学过集合的小伙伴应该都知道，没学过的那你应该补补课了。</p><p><em><strong>泛型的语法</strong></em></p><pre><code>public class A&lt;T extends B&gt;&#123;   T t;&#125;</code></pre><h2 id="泛型的缺点或者为什么需要上、下边界"><a href="#泛型的缺点或者为什么需要上、下边界" class="headerlink" title="泛型的缺点或者为什么需要上、下边界"></a>泛型的缺点或者为什么需要上、下边界</h2><p>&emsp;&emsp;泛型的虽然强大，但是世界上任何东西东部是完美的。它也有缺陷。比如说我有一个盒子我想装苹果，但是我还可能想装香蕉那怎么办。那还不好说，在给一个参数不就行了，那十个呢，二十个呢。em….的确是。如果说我们想装的东西都属于一个类并且只要是这个类的子类就可以装。这个想法sun为我们想好了。那就是用上边界通配符。语法是<T entends M> T是泛型，M是T的父类。我们就定义一个水果类（Fruit），盛装就容器就是盘子（Dish），现在我们就可以装任何水果了，不错吧！</p><p><em><strong>上边界Java代码</strong></em></p><pre><code>public class Dish&lt;T extends Fruit&gt;&#123;  private T fruitChild;  public Dish(T fruitChild)&#123;    this.fruitChild = fruitChild;  &#125;  public T getFruitChild()&#123;    return fruitChild;  &#125;    public void setFruitChild(T f)&#123;    this.fruitChild = f;  &#125;  public static void main(String[] args)&#123;    Dish dish = new Dish&lt;apple&gt;();    Apple apple = new apple(); //apple must be Fruit child;    dish.setFruitChild(apple);    system.out.printf(dish.getFruitChild);  &#125;&#125;</code></pre><p><em><strong>下边界Java代码</strong></em></p><pre><code>public class Dish&lt;T super Apple&gt;&#123;  private T appleFather;  public Dish(T appleFather)&#123;    this.appleFather = appleFather;  &#125;  public T getAppleFather()&#123;    return appleFather;  &#125;  public void setAppleFather(T f)&#123;    this.appleFather = f;  &#125;  public static void main(String[] args)&#123;    Dish dish = new Dish&lt;Fruit&gt;();    Fruit fruit = new Fruit(); //fruit must be apple son;    dish.setAppleFather(fruit);    system.out.printf(dish.getAppleFather);  &#125;&#125;</code></pre><h2 id="什么是上边界通配符"><a href="#什么是上边界通配符" class="headerlink" title="什么是上边界通配符"></a>什么是上边界通配符</h2><p>&emsp;&emsp;当泛型T给定形如<T extends A> 的A类型到A类型任何子类的限制域，可以匹配任何在此限制域中的类型，此种表示叫上边界通配符。<br>###上边界通配符理解<br><img src= "/img/loading1.gif" data-lazy-src="https://images2015.cnblogs.com/blog/820480/201611/820480-20161125004120143-1731938777.png" alt="png"></p><h2 id="什么是下边界通配符"><a href="#什么是下边界通配符" class="headerlink" title="什么是下边界通配符"></a>什么是下边界通配符</h2><p>&emsp;&emsp;当泛型T给定形如<T super A> 的A类型到A类型任何父类的限制域，可以匹配任何在此限制域中的类型，此种表示叫下边界通配符。</p><h3 id="下边界通配符理解"><a href="#下边界通配符理解" class="headerlink" title="下边界通配符理解"></a>下边界通配符理解</h3><p><img src= "/img/loading1.gif" data-lazy-src="https://images2015.cnblogs.com/blog/820480/201611/820480-20161125004216471-1377946016.png" alt="png"></p><h2 id="上下边界通配符的缺点"><a href="#上下边界通配符的缺点" class="headerlink" title="上下边界通配符的缺点"></a>上下边界通配符的缺点</h2><p>&emsp;&emsp;上界&lt;? extends T&gt;不能往里存，只能往外取。<br>###解释<br>&emsp;&emsp;因为编译器只知道传入的是T的子类，但具体是哪一个编译器不知道，他只标注了一个占位符，当？传过来时，他不知道这能不能和占位符匹配，所以set不了。<br>&emsp;&emsp;下界&lt;? super T&gt;不影响往里存，但往外取只能放在Object对象里。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>&emsp;&emsp;因为下边界已经限制了？的粒度，他只可能是T本身或者是T的父类。我们想想，我想要一个T，你却返回给我一个比T小的Object，这样我们就因为精度损失而拿不到想要的数据了。</p><blockquote><p>感谢各位童鞋的阅读，希望大家动一动发财的小手点一下推荐QAQ。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;泛型的由来&quot;&gt;&lt;a href=&quot;#泛型的由来&quot; class=&quot;headerlink&quot; title=&quot;泛型的由来&quot;&gt;&lt;/a&gt;泛型的由来&lt;/h2&gt;&lt;h3 id=&quot;为什么需要泛型&quot;&gt;&lt;a href=&quot;#为什么需要泛型&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="博客园博文" scheme="https://zhaozheng.link/categories/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E5%8D%9A%E6%96%87/"/>
    
    <category term="博客美化" scheme="https://zhaozheng.link/categories/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E5%8D%9A%E6%96%87/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
    
    <category term="博客园" scheme="https://zhaozheng.link/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"/>
    
  </entry>
  
  <entry>
    <title>超实用的SQL语句之嵌套查询</title>
    <link href="https://zhaozheng.link/%E8%B6%85%E5%AE%9E%E7%94%A8%E7%9A%84SQL%E8%AF%AD%E5%8F%A5%E4%B9%8B%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2/"/>
    <id>https://zhaozheng.link/%E8%B6%85%E5%AE%9E%E7%94%A8%E7%9A%84SQL%E8%AF%AD%E5%8F%A5%E4%B9%8B%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-08-31T11:40:33.000Z</published>
    <updated>2021-05-12T08:12:56.945Z</updated>
    
    <content type="html"><![CDATA[<h2>嵌套查询</h2><h3>什么是嵌套查询</h3>. 　　嵌套查询的意思是，一个查询语句(select-from-where)查询语句块可以嵌套在另外一个查询块的where子句中，称为嵌套查询。其中外层查询也称为父查询，主查询。内层查询也称子查询，从查询。<h3>嵌套查询的工作方式</h3> 　　先处理内查询，由内向外处理，外层查询利用内层查询的结果嵌套查询不仅仅可以用于父查询select语句使用。还可以用于insert、update、delete语句或其他子查询中。<h2>子查询的组成</h2> 1、包含标准选择列表组件的标准select查询。<p> 2、包含一个或多个表或者视图名称的标准from子句。</p><p> 3、可选的where子句。</p><p> 4、可选的group by子句。</p><p> 5、可选的having子句。</p><h2>子查询的语法规则</h2> 1、子查询的select查询总是使用圆括号括起来。<p> 2、不能包括compute或for.browse子句。</p><p> 3、如果同时指定top子句，则可能只包括order by子句。</p><p> 4、子查询最多可以嵌套到32层。个别查询可能会不支持32层嵌套。</p><p> 5、任何可以使用表达式的地方都可以使用子查询，只要它返回的是单个值。</p><p> 6、如果某个表只出现在子查询中二不出现在外部查询中，那么该表的列就无法包含在输出中。</p><h2>简单子查询</h2><strong>示例：</strong><pre><code>select name,age from person where age &gt;     (        select age from person         where name = &#39;孙权&#39;    )</code></pre><p><strong>输出结果为：</strong><br><img src= "/img/loading1.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/glassy-sky-lisong/StaticFile1@master/post/4.jpg" alt="1"></p><h2>in嵌套查询</h2> 　　in关键字用于where子句中用来判断查询的表达式是否在多个值的列表中。返回满足in列表中的满足条件的记录。<p><strong>示例：</strong></p><pre><code>select name from person where countryid in (select countryid from countrywhere countryname = &#39;魏国&#39;)</code></pre><p><strong>输出结果为：</strong></p><img src= "/img/loading1.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/glassy-sky-lisong/StaticFile1@master/post/3.jpg" alt="2"><h2>some嵌套查询</h2><h3>语法</h3> 　　some在sql中的逻辑运算符号，如果在一系列比较中，有些值为True，那么结果就为True。some的语法是：<pre><code>&lt;表达式&gt;&#123; =|&lt;&gt;|!=|&gt;|&gt;=|!&gt;|&lt;|&lt;=|!&lt;&#125;some(子查询)</code></pre><p><strong>示例：</strong></p><pre><code>select name from person where countryid = some 　　　　　　--用等号和以下查询到的值比较，如果与其中一个相等，就返回(select countryid from countrywhere countryname = &#39;魏国&#39;)</code></pre><p><strong>输出结果为：</strong><br><img src= "/img/loading1.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/glassy-sky-lisong/StaticFile1@master/post/2.jpg" alt="3"></p><h2>all嵌套查询</h2> 　　all是sql中的逻辑运算符好，如果一系列的比较都为true，那么结果才能为true。<h3>语法</h3><pre><code>&lt;表达式&gt;&#123; =|&lt;&gt;|!=|&gt;|&gt;=|!&gt;|&lt;|&lt;=|!&lt;&#125;all(子查询)</code></pre><p><strong>示例：</strong></p><pre><code>select name from person where countryid &gt; all　　 --当countryid大于以下返回的所有id，此结果才为True，此结果才返回(select countryid from countrywhere countryname = &#39;魏国&#39;)</code></pre><p><strong>输出结果为：</strong><br><img src= "/img/loading1.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/glassy-sky-lisong/StaticFile1@master/post/1.jpg" alt="4"></p><h2>exists嵌套查询</h2><h3>语法</h3> 　　exists是sql中的逻辑运算符号。如果子查询有结果集返回，那么就为True。exists代表“存在”的意义，它只查找满足条件的那些记录。<span style="color:red">一旦找到第一个匹配的记录后，就马上停止查找。</span><pre><code>exists　子查询</code></pre><p> 　　其中子查询是一个首先的select语句，不允许有compute子句和into关键字。<br>exists 的意思是，子查询是否有结果集返回。<br><strong>例如：</strong></p><pre><code>SELECT * FROM PersonWHERE exists(SELECT 1      --SELECT 0  SELECT NULL 返回结果都一样，因为这三个子查询都有结果集返回，因此总是True  SELECT * FROM Person照常执行)</code></pre><p> 　　但是如果子查询中因为加了条件而没有结果集返回，则主语句就不执行了：</p><pre><code>SELECT * FROM PersonWHERE exists(SELECT * FROM Person WHERE Person_Id = 100    --如果不存在Person_Id的记录，则子查询没有结果集返回，主语句不执行)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;嵌套查询&lt;/h2&gt;
&lt;h3&gt;什么是嵌套查询&lt;/h3&gt;.
 　　嵌套查询的意思是，一个查询语句(select-from-where)查询语句块可以嵌套在另外一个查询块的where子句中，称为嵌套查询。其中外层查询也称为父查询，主查询。内层查询也称子查询，从查询。
&lt;h3&gt;嵌</summary>
      
    
    
    
    <category term="博客园博文" scheme="https://zhaozheng.link/categories/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E5%8D%9A%E6%96%87/"/>
    
    <category term="mybatis" scheme="https://zhaozheng.link/categories/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E5%8D%9A%E6%96%87/mybatis/"/>
    
    
    <category term="MySQL" scheme="https://zhaozheng.link/tags/MySQL/"/>
    
    <category term="MyBatis" scheme="https://zhaozheng.link/tags/MyBatis/"/>
    
    <category term="SQL技巧" scheme="https://zhaozheng.link/tags/SQL%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Vue父子组件传参</title>
    <link href="https://zhaozheng.link/Vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82/"/>
    <id>https://zhaozheng.link/Vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82/</id>
    <published>2020-08-30T12:08:31.000Z</published>
    <updated>2021-04-02T03:48:13.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="父子组件以及子父组件"><a href="#父子组件以及子父组件" class="headerlink" title="父子组件以及子父组件"></a>父子组件以及子父组件</h1><h3 id="一-概念描述"><a href="#一-概念描述" class="headerlink" title="一,概念描述"></a>一,概念描述</h3><ul><li><p>比如现在有两个页面,页面一,页面二,你想在页面二中使用页面一的变量,这时你就可以通过父子组件之间的通信来进行传递数据,使得你在页面二可以使用页面一的数据,这就是组件传值</p><h3 id="二-应用场景"><a href="#二-应用场景" class="headerlink" title="二,应用场景"></a>二,应用场景</h3></li><li><p>比如当你在其他页面也需要后端的某些数据时,你要想减少与后端数据库的交互的时候,你可以利用组件间的传递来减少与后端数据库的交互</p><h3 id="三-功能实现"><a href="#三-功能实现" class="headerlink" title="三,功能实现"></a>三,功能实现</h3></li><li><p>父子传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;    </span><br><span class="line">    <span class="comment">// 将需要传递的变量通过v-bind绑定</span></span><br><span class="line">    &lt;Courseheader :course_detail=<span class="string">&quot;course_detail&quot;</span>&gt;&lt;/Courseheader&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件接收</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  <span class="comment">//输出父组件传过来的变量值</span></span><br><span class="line">    &lt;span&gt;&#123;&#123;course_detail&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//子组件利用props来接收父组件传过来的参数</span></span><br><span class="line">  props:[<span class="string">&#x27;course_detail&#x27;</span>]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>子父传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;子组件&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;to_father&quot;</span>&gt;向父组件传值&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            data: <span class="string">&#x27;子组件的数据&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        to_father:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 子组件利用$emit来进行与父组件的交互</span></span><br><span class="line">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;data&#x27;</span>, <span class="built_in">this</span>.data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123; newData &#125;&#125;</span><br><span class="line">        &lt;child @data=<span class="string">&quot;change($data)&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            newData: <span class="string">&#x27;这是子组件传给父组件的数据&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">change</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 监听方法,来给newData进行赋值</span></span><br><span class="line">            <span class="built_in">this</span>.newData = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;父子组件以及子父组件&quot;&gt;&lt;a href=&quot;#父子组件以及子父组件&quot; class=&quot;headerlink&quot; title=&quot;父子组件以及子父组件&quot;&gt;&lt;/a&gt;父子组件以及子父组件&lt;/h1&gt;&lt;h3 id=&quot;一-概念描述&quot;&gt;&lt;a href=&quot;#一-概念描述&quot; class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue请求拦截器</title>
    <link href="https://zhaozheng.link/Vue%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8%E5%8F%8A%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>https://zhaozheng.link/Vue%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8%E5%8F%8A%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2020-08-30T12:08:31.000Z</published>
    <updated>2021-04-02T03:48:34.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue拦截器"><a href="#Vue拦截器" class="headerlink" title="Vue拦截器"></a>Vue拦截器</h1><h3 id="一，概念部分："><a href="#一，概念部分：" class="headerlink" title="一，概念部分："></a>一，概念部分：</h3><ul><li><p>什么是vue拦截器及作用?</p><ul><li>简单来说,一般像数据交互之类的项目,都要用到不同的身份验证,比如登录token验证,来验证他是否登录,如果没有登录他就不能查看这个页面的东西,这就是拦截器的作用</li></ul></li><li><p>vue中常见的拦截器?</p><ul><li>请求拦截器和响应拦截器</li></ul></li></ul><h3 id="二，应用场景："><a href="#二，应用场景：" class="headerlink" title="二，应用场景："></a>二，应用场景：</h3><ul><li>比如你前端传token的时候,你每发送一次请求就要获取一下,相比较麻烦,此时我们可以将token放在前端的请求拦截器中,这样他就会自动向后端发送token</li></ul><h3 id="三，功能实现："><a href="#三，功能实现：" class="headerlink" title="三，功能实现："></a>三，功能实现：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先把axios的包导进来</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取自己状态保持的token</span></span><br><span class="line">  <span class="keyword">let</span> token = sessionStorage.getItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">  <span class="comment">// 判断他是否存在,如果存在就将它保存到jwt头部里</span></span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    <span class="comment">// axios.defaults.headers[&#x27;Authorization&#x27;] = token // 头部设置</span></span><br><span class="line">    config.headers.common[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">&quot;JWT &quot;</span> + token <span class="comment">// 头部设置</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 错误之后做的操作</span></span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器(在响应时自动会做的操作)，比如状态码返回为401时，要进入login界面</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 200</span></span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.request.status == <span class="number">401</span>) &#123;</span><br><span class="line">      <span class="comment">// 错误之后,跳转页面</span></span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&quot;/&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> error</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue拦截器&quot;&gt;&lt;a href=&quot;#Vue拦截器&quot; class=&quot;headerlink&quot; title=&quot;Vue拦截器&quot;&gt;&lt;/a&gt;Vue拦截器&lt;/h1&gt;&lt;h3 id=&quot;一，概念部分：&quot;&gt;&lt;a href=&quot;#一，概念部分：&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue路由钩子</title>
    <link href="https://zhaozheng.link/Vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/"/>
    <id>https://zhaozheng.link/Vue%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/</id>
    <published>2020-08-30T12:08:31.000Z</published>
    <updated>2021-04-02T03:48:21.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue路由钩子"><a href="#Vue路由钩子" class="headerlink" title="Vue路由钩子"></a>Vue路由钩子</h1><h3 id="一-什么是路由钩子"><a href="#一-什么是路由钩子" class="headerlink" title="一,什么是路由钩子?"></a>一,什么是路由钩子?</h3><ul><li>简单来讲,就是当路由跳转前或者跳转后，需要做一些操作，就可以使用Vue中的路由钩子来监听路由的变化。<h3 id="二-路由钩子分为几类"><a href="#二-路由钩子分为几类" class="headerlink" title="二,路由钩子分为几类?"></a>二,路由钩子分为几类?</h3></li><li>全局路由钩子<ul><li>每一次跳转都会执行</li></ul></li><li>单个路由钩子<ul><li>在跳转前执行</li></ul></li><li>组件内路由钩子<h3 id="三-代码实现"><a href="#三-代码实现" class="headerlink" title="三,代码实现"></a>三,代码实现</h3></li><li>全局路由钩子</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局路由钩子</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//会在任意路由跳转前执行，next一定要记着执行，不然路由不能跳转了</span></span><br><span class="line">  <span class="built_in">console</span>.log(to)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">from</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(next)</span><br><span class="line">  <span class="comment">// 首先来说全局路由的三个参数</span></span><br><span class="line">  <span class="comment">// to:   就是跳转路由参数</span></span><br><span class="line">  <span class="comment">// from: 就是离开路由参数</span></span><br><span class="line">  <span class="comment">// next: 是否允许跳转</span></span><br><span class="line">  next();</span><br><span class="line">  <span class="comment">// 这个next()必须有,没有就无法跳转了</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>单个路由钩子<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个路由钩子</span></span><br><span class="line">routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">      component: Index,</span><br><span class="line">      beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li></ul><ul><li>组件内路由钩子<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 进入页面前调用</span></span><br><span class="line"><span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;进入路由前调用的方法&#x27;</span>)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    next()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 离开页面调用</span></span><br><span class="line"><span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to,<span class="keyword">from</span>, next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;离开页面后调用的方法&#x27;</span>)</span><br><span class="line">    next()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 页面路由改变时调用</span></span><br><span class="line"><span class="function"><span class="title">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;路由发生改变的时候调用的方法&#x27;</span>)</span><br><span class="line">    next()</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue路由钩子&quot;&gt;&lt;a href=&quot;#Vue路由钩子&quot; class=&quot;headerlink&quot; title=&quot;Vue路由钩子&quot;&gt;&lt;/a&gt;Vue路由钩子&lt;/h1&gt;&lt;h3 id=&quot;一-什么是路由钩子&quot;&gt;&lt;a href=&quot;#一-什么是路由钩子&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis键空间</title>
    <link href="https://zhaozheng.link/redis%E9%94%AE%E7%A9%BA%E9%97%B4/"/>
    <id>https://zhaozheng.link/redis%E9%94%AE%E7%A9%BA%E9%97%B4/</id>
    <published>2020-08-30T12:08:31.000Z</published>
    <updated>2021-04-02T03:47:57.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis键空间"><a href="#Redis键空间" class="headerlink" title="Redis键空间"></a>Redis键空间</h1><h2 id="一，什么是Redis键空间"><a href="#一，什么是Redis键空间" class="headerlink" title="一，什么是Redis键空间"></a>一，什么是Redis键空间</h2><ul><li>客户端可以通过订阅频道或模式， 来接收那些以某种方式改动了 Redis 数据集的事件<h2 id="二，应用场景"><a href="#二，应用场景" class="headerlink" title="二，应用场景"></a>二，应用场景</h2></li><li>比如打车类软件或者淘宝，对某个用户或者商品进行评价，在规定的时间里用户没有给予评价那么系统就会自动进行评价，可以理解为这个key过期了。<h2 id="三，代码实现"><a href="#三，代码实现" class="headerlink" title="三，代码实现"></a>三，代码实现</h2><h3 id="想要开启键空间通知必须得进行对notify-keyspace-events进行配置"><a href="#想要开启键空间通知必须得进行对notify-keyspace-events进行配置" class="headerlink" title="想要开启键空间通知必须得进行对notify-keyspace-events进行配置"></a>想要开启键空间通知必须得进行对notify-keyspace-events进行配置</h3></li><li>notify-keyspace-events 为空字符串时，键空间通知关闭</li><li>当给notify-keyspace-events 设值时，表示键空间通知开启</li></ul><p>这是对notify-keyspace-events的相关啊配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">K &amp; 键空间通知，所有通知以 `__keyspace@<span class="tag">&lt;<span class="name">db</span>&gt;</span>__` 为前缀</span><br><span class="line"></span><br><span class="line">E &amp; 键事件通知，所有通知以 `__keyevent@<span class="tag">&lt;<span class="name">db</span>&gt;</span>__` 为前缀</span><br><span class="line"></span><br><span class="line">g &amp; DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知</span><br><span class="line"></span><br><span class="line">$ &amp; 字符串命令的通知</span><br><span class="line"></span><br><span class="line">l &amp; 列表命令的通知</span><br><span class="line"></span><br><span class="line">s &amp; 集合命令的通知</span><br><span class="line"></span><br><span class="line">h &amp; 哈希命令的通知</span><br><span class="line"></span><br><span class="line">z &amp; 有序集合命令的通知</span><br><span class="line"></span><br><span class="line">x &amp; 过期事件：每当有过期键被删除时发送</span><br><span class="line"></span><br><span class="line">e &amp; 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送</span><br><span class="line"></span><br><span class="line">A &amp; 参数 g$lshzxe 的别名，即all</span><br></pre></td></tr></table></figure><blockquote><p>注意：输入的参数中至少要有一个 K 或者 E ， 否则的话， 不管其余的参数是什么， 都不会有任何通知被分发</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli config set notify-keyspace-events KEA</span><br><span class="line">$ redis-cli --csv psubscribe &#39;__key*__:*&#39;</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">&quot;psubscribe&quot;,&quot;__key*__:*&quot;,1</span><br></pre></td></tr></table></figure><p>然后在其他终端向redis终端发送命令就可以看到通知了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;pmessage&quot;,&quot;__key*__:*&quot;,&quot;__keyspace@0__:foo&quot;,&quot;set&quot;</span><br><span class="line">&quot;pmessage&quot;,&quot;__key*__:*&quot;,&quot;__keyevent@0__:set&quot;,&quot;foo&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis键空间&quot;&gt;&lt;a href=&quot;#Redis键空间&quot; class=&quot;headerlink&quot; title=&quot;Redis键空间&quot;&gt;&lt;/a&gt;Redis键空间&lt;/h1&gt;&lt;h2 id=&quot;一，什么是Redis键空间&quot;&gt;&lt;a href=&quot;#一，什么是Redis键空间&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis发布者订阅者</title>
    <link href="https://zhaozheng.link/redis%E5%8F%91%E5%B8%83%E8%80%85%E8%AE%A2%E9%98%85%E8%80%85/"/>
    <id>https://zhaozheng.link/redis%E5%8F%91%E5%B8%83%E8%80%85%E8%AE%A2%E9%98%85%E8%80%85/</id>
    <published>2020-08-30T12:08:31.000Z</published>
    <updated>2021-04-02T03:47:41.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis发布者订阅者"><a href="#redis发布者订阅者" class="headerlink" title="redis发布者订阅者"></a>redis发布者订阅者</h1><p>一，概念知识</p><ul><li>什么是发布者？<ul><li>redis提供 一组命令实现订阅者发布者模式，publisher subscriber。实现进程间通信，而发布者顾名思义就是发送数据包的</li></ul></li><li>什么是订阅者？<ul><li>每个订阅者会等待接收发布者发送的消息，当发布者发布消息后，订阅者全部接收到</li></ul></li></ul><p>二，应用场景</p><ul><li>比如打车类软件，当你发送你要打车时，这个消息就会同时发送到司机师傅那，然后他们选择离你最近的，他们就属于订阅者，而你是发布者</li></ul><p>三，代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#发布者pub</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">conn = redis.Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, decode_responses=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">conn.publish(<span class="string">&#x27;zheng&#x27;</span>, <span class="string">&#x27;18&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">conn = redis.Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, decode_responses=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个订阅者对象sub</span></span><br><span class="line">pubsub = conn.pubsub()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是订阅一个消息</span></span><br><span class="line">pubsub.subscribe(<span class="string">&#x27;zheng&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行while循环，每次都进行接收</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = pubsub.parse_response()</span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br></pre></td></tr></table></figure><h3 id="这是一些redis常用的一些发布订阅者命令："><a href="#这是一些redis常用的一些发布订阅者命令：" class="headerlink" title="这是一些redis常用的一些发布订阅者命令："></a>这是一些redis常用的一些发布订阅者命令：</h3><p>| 1 | PSUBSCRIBE pattern [pattern …] |订阅一个或多个符合给定模式的频道。|<br>|:—–|:—–|:—–|:—–|:—–|:—–|<br>| 2 | PUBSUB subcommand [argument [argument …]] |查看订阅与发布系统状态。|<br>| 3    | PUBLISH channel message |将信息发送到指定的频道。|<br>| 4    | PUNSUBSCRIBE [pattern [pattern …]] |退订所有给定模式的频道。|<br>| 5 |SUBSCRIBE channel [channel …] |订阅给定的一个或多个频道的信息。|<br>| 6    | UNSUBSCRIBE [channel [channel …]] |指退订给定的频道。|</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;redis发布者订阅者&quot;&gt;&lt;a href=&quot;#redis发布者订阅者&quot; class=&quot;headerlink&quot; title=&quot;redis发布者订阅者&quot;&gt;&lt;/a&gt;redis发布者订阅者&lt;/h1&gt;&lt;p&gt;一，概念知识&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是发布者？&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Webshell在浏览器中实现终端</title>
    <link href="https://zhaozheng.link/websell/"/>
    <id>https://zhaozheng.link/websell/</id>
    <published>2020-08-30T12:08:31.000Z</published>
    <updated>2021-04-02T03:48:55.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="websell"><a href="#websell" class="headerlink" title="websell"></a>websell</h1><p>一，概念：</p><ul><li>什么是websell：<ul><li>webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种代码执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。</li><li>他是一个集成了一堆Linux命令的控制台界面</li></ul></li><li>sell的分类： <ul><li>SH：编程方面相当优秀，输入命令优秀</li><li>BASH：Linux系统中的一个默认shell，命令多</li></ul></li></ul><p>二，应用场景：</p><ul><li>比如实验楼，他就是在浏览器中实现的黑窗口，供用户进行学习使用，非常方便</li></ul><p>三，代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装xterm</span></span><br><span class="line"> npm install xterm@<span class="number">3.1</span><span class="number">.0</span> --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js中导入css样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;xterm/dist/xterm.css&#x27;</span> </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在你对应的页面上放上这个div标签，这就是那个黑窗口</span></span><br><span class="line">&lt;div id=<span class="string">&quot;terminal&quot;</span>&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Terminal &#125; <span class="keyword">from</span> <span class="string">&#x27;xterm&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> attach <span class="keyword">from</span> <span class="string">&#x27;xterm/lib/addons/attach/attach&#x27;</span> <span class="comment">// 安装插件适，可以使用attach去添加</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fit <span class="keyword">from</span> <span class="string">&#x27;xterm/lib/addons/fit/fit&#x27;</span> <span class="comment">// fit进行自适应大小的</span></span><br><span class="line"></span><br><span class="line">Terminal.applyAddon(attach) <span class="comment">// 添加插件</span></span><br><span class="line">Terminal.applyAddon(fit) <span class="comment">// 添加插件</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取到了div标签</span></span><br><span class="line"><span class="keyword">let</span> terminalContainer = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;terminal&#x27;</span>)</span><br><span class="line"><span class="comment">// 初始化黑窗口对象</span></span><br><span class="line"><span class="built_in">this</span>.term = <span class="keyword">new</span> Terminal(<span class="built_in">this</span>.terminal)</span><br><span class="line"><span class="comment">// 打开这个对象</span></span><br><span class="line"><span class="built_in">this</span>.term.open(terminalContainer)</span><br></pre></td></tr></table></figure><blockquote><p>这就实现了在浏览器中实现黑窗口，如果想完善的话可以连接docker容器，这样只是你自己的云主机，想看docker可以去我下一章博客</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;websell&quot;&gt;&lt;a href=&quot;#websell&quot; class=&quot;headerlink&quot; title=&quot;websell&quot;&gt;&lt;/a&gt;websell&lt;/h1&gt;&lt;p&gt;一，概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是websell：&lt;ul&gt;
&lt;li&gt;webshell就是以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>云主机安装数据库</title>
    <link href="https://zhaozheng.link/%E4%BA%91%E4%B8%BB%E6%9C%BACentOS7%E5%AE%89%E8%A3%85Mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://zhaozheng.link/%E4%BA%91%E4%B8%BB%E6%9C%BACentOS7%E5%AE%89%E8%A3%85Mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-08-30T12:08:31.000Z</published>
    <updated>2021-04-21T07:23:06.380Z</updated>
    
    <content type="html"><![CDATA[<p>安装MySQL<br>在CentOS中默认安装有MariaDB，这个是MySQL的分支，但为了需要，还是要在系统中安装MySQL，而且安装完成之后可以直接覆盖掉MariaDB。</p><p>1.下载并安装MySQL官方的 Yum Repository</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget -i -c http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line">2.yum安装</span><br><span class="line"></span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">3.安装MySQL服务器, 这步可能会花些时间，安装完成后就会覆盖掉之前的mariadb。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br><span class="line">4.MySQL数据库设置, 首先启动mysql服务器</span><br><span class="line"></span><br><span class="line">systemctl start mysqld.service</span><br><span class="line"></span><br><span class="line">systemctl status mysqld.service  # 查看服务器状态</span><br><span class="line"></span><br><span class="line"># ● mysqld.service - MySQL Server</span><br><span class="line">#   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Wed 2021-03-31 18:57:38 CST; 1h 8min ago</span><br><span class="line">#      Docs: man:mysqld(8)</span><br><span class="line">#            http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html</span><br><span class="line">#   Process: 3496 ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;mysqld --daemonize --pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid $MYSQLD_OPTS (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line">#   Process: 3475 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;mysqld_pre_systemd (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line">#  Main PID: 3500 (mysqld)</span><br><span class="line">#    CGroup: &#x2F;system.slice&#x2F;mysqld.service</span><br><span class="line">#            └─3500 &#x2F;usr&#x2F;sbin&#x2F;mysqld --daemonize --pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</span><br><span class="line"></span><br><span class="line"># Mar 31 18:57:37 iz2zeio2pnjhu6acetcrilz systemd[1]: Starting MySQL Server...</span><br><span class="line"># Mar 31 18:57:38 iz2zeio2pnjhu6acetcrilz systemd[1]: Started MySQL Server.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5.找出此时root用户的密码</span><br><span class="line">grep &quot;password&quot; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line"></span><br><span class="line"># 2021-03-31T07:40:25.106445Z 1 [Note] A temporary password is generated for root@localhost: GWmqHjoou4;D</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6.进入数据库并修改密码</span><br><span class="line">mysql -uroot -p  # 密码为初始密码: GWmqHjoou4;D</span><br><span class="line"></span><br><span class="line"># 修改密码</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new password&#39;;  </span><br><span class="line"># 其中‘new password’替换成你要设置的密码，注意:密码设置必须要大小写字母数字和特殊符号（,&#x2F;&#39;;:等）,不然不能配置成功</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">7.开启mysql的远程访问</span><br><span class="line"># 执行以下命令开启远程访问限制（注意：下面命令开启的IP是127.0.0.0）</span><br><span class="line">grant all privileges on *.* to &#39;root&#39;@&#39;127.0.0.0&#39; identified by &#39;password&#39; with grant option;</span><br><span class="line"># 如要开启所有的，用%代替IP</span><br><span class="line">grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39; with grant option;</span><br><span class="line"># password为数据库密码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">8.执行命令</span><br><span class="line">flush privileges; </span><br><span class="line"></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>9.为firewalld添加开放端口<br>如果你是阿里云云端服务器, 与redis一样需要对防火墙进行设置, 开放端口3306<br>若不是添加mysql端口3306和Tomcat端口8080</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# firewall-cmd --zone&#x3D;public --add-port&#x3D;3306&#x2F;tcp --permanent</span><br><span class="line">[root@localhost ~]# firewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp --permanent</span><br><span class="line"></span><br><span class="line"># 然后再重新载入</span><br><span class="line">[root@localhost ~]# firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>10.更改mysql的语言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">重新登录mysql，然后输入status：</span><br><span class="line">Snipaste_2021-03-31_20-41-11.jpg</span><br><span class="line">可以看到，绿色箭头处不是utf-8</span><br><span class="line">因此我们先退出mysql，然后再到~, etc目录下的my.cnf文件下修改一下文件内容</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vi &#x2F;etc&#x2F;my.cnf</span><br><span class="line">进入文件后，新增四行代码</span><br><span class="line"></span><br><span class="line">[client]  # 第一行</span><br><span class="line">default-character-set&#x3D;utf8  # 第二行</span><br><span class="line"># For advice on how to change settings please see</span><br><span class="line"># http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;server-configuration-defaults.html</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">#</span><br><span class="line"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line"># innodb_buffer_pool_size &#x3D; 128M</span><br><span class="line">#</span><br><span class="line"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="line"># changes to the binary log between backups.</span><br><span class="line"># log_bin</span><br><span class="line">#</span><br><span class="line"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"># join_buffer_size &#x3D; 128M</span><br><span class="line"># sort_buffer_size &#x3D; 2M</span><br><span class="line"># read_rnd_buffer_size &#x3D; 2M</span><br><span class="line">datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line">character-set-server&#x3D;utf8   # 第三行</span><br><span class="line">collation-server&#x3D;utf8_general_ci  # 第四行</span><br><span class="line"></span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links&#x3D;0</span><br><span class="line"></span><br><span class="line">log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line">pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;安装MySQL&lt;br&gt;在CentOS中默认安装有MariaDB，这个是MySQL的分支，但为了需要，还是要在系统中安装MySQL，而且安装完成之后可以直接覆盖掉MariaDB。&lt;/p&gt;
&lt;p&gt;1.下载并安装MySQL官方的 Yum Repository&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>云主机安装Python</title>
    <link href="https://zhaozheng.link/%E4%BA%91%E4%B8%BB%E6%9C%BACentOS7%E5%AE%89%E8%A3%85python3.6%E5%92%8CDjango/"/>
    <id>https://zhaozheng.link/%E4%BA%91%E4%B8%BB%E6%9C%BACentOS7%E5%AE%89%E8%A3%85python3.6%E5%92%8CDjango/</id>
    <published>2020-08-30T12:08:31.000Z</published>
    <updated>2021-04-20T12:27:59.204Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进入官网"><a href="#进入官网" class="headerlink" title="进入官网"></a>进入官网</h3><ul><li><p>拿取下载地址：<a href="https://www.python.org/">https://www.python.org/</a></p><ul><li>  <a href="https://www.python.org/ftp/python/3.7.5/Python-3.7.5.tar.xz">https://www.python.org/ftp/python/3.7.5/Python-3.7.5.tar.xz</a></li></ul></li><li><p>到云主机下载</p><ul><li>  wget：下载某个链接上的资源</li></ul></li><li><p>  进入home目录</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd home&#x2F;     # 进入目录</span><br><span class="line">mkdir tools  # 创建目录</span><br><span class="line">wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.7.5&#x2F;Python-3.7.5.tar.xz  # 在该目录下下载python3的压缩文件</span><br></pre></td></tr></table></figure><blockquote><p>  过程中发现下载太慢了，实在受不了了，可以本地先下载，然后上传，推荐使用filezilla工具</p></blockquote><ul><li>  解压xz格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xz -d Python-3.7.5.tar.xz </span><br></pre></td></tr></table></figure><ul><li>  打开tar归档模式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf Python-3.7.5.tar </span><br></pre></td></tr></table></figure><ul><li>  安装依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br></pre></td></tr></table></figure><ul><li>  进入目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Python-3.7.5</span><br></pre></td></tr></table></figure><ul><li>  创建一个python的安装目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;python37</span><br></pre></td></tr></table></figure><ul><li>  配置安装选项，安装python到python37目录下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python37</span><br></pre></td></tr></table></figure><ul><li>  执行编译</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make </span><br></pre></td></tr></table></figure><ul><li>  执行安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install </span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Successfully installed pip-19.2.3 setuptools-41.2.0</span><br></pre></td></tr></table></figure><ul><li>  构建软连接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python37&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;bin&#x2F;python3</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python37&#x2F;bin&#x2F;pip3 &#x2F;usr&#x2F;bin&#x2F;pip3</span><br></pre></td></tr></table></figure><ul><li></li><li>  安装django</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django&#x3D;&#x3D;2.0.4 -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure><blockquote><p>  虽然安装好了django，但是他居然不能用，这是因为他也得需要设置软连接 </p></blockquote><ul><li>  设置django-admin的软连接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python37&#x2F;bin&#x2F;django-admin &#x2F;usr&#x2F;bin&#x2F;django-admin</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;进入官网&quot;&gt;&lt;a href=&quot;#进入官网&quot; class=&quot;headerlink&quot; title=&quot;进入官网&quot;&gt;&lt;/a&gt;进入官网&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;拿取下载地址：&lt;a href=&quot;https://www.python.org/&quot;&gt;https://www.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>云主机安装redis数据库</title>
    <link href="https://zhaozheng.link/%E4%BA%91%E4%B8%BB%E6%9C%BA%E5%AE%89%E8%A3%85redis%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://zhaozheng.link/%E4%BA%91%E4%B8%BB%E6%9C%BA%E5%AE%89%E8%A3%85redis%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-08-30T12:08:31.000Z</published>
    <updated>2021-04-02T03:45:40.402Z</updated>
    
    <content type="html"><![CDATA[<p>1.安装redis数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install redis</span><br></pre></td></tr></table></figure><p>2.下载fedora的epel仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><p>3.启动redis服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start redis</span><br></pre></td></tr></table></figure><p>4.查看redis状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure><p>停止服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop redis </span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart redis</span><br></pre></td></tr></table></figure><p>5.查看redis进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep redis</span><br></pre></td></tr></table></figure><p>6.设置开机自启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable redis</span><br></pre></td></tr></table></figure><p>7.开放端口号 (若端口已开放此步可省略，可先8后7)</p><p> </p><p>linux 操作防火墙: linux开放防火墙端口</p><p> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;6379&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure><p>注意：80端口是必须要开放的</p><p>重启防火墙：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><p>8.查看端口 （若此命令无效可百度自行安装）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp|grep 6379</span><br></pre></td></tr></table></figure><p>9.设置redis 远程连接和密码</p><p>输入命令进入编辑模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;redis.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将这部注释掉，否则只有本机才能访问  bind 127.0.0.1 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">##################################NETWORK#####################################</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span><br><span class="line">        # JUST COMMENT THE FOLLOWING LINE.</span><br><span class="line">        # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">        #bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # Protected mode is a layer of security protection, in order to avoid that</span><br><span class="line">        # Redis instances left open on the internet are accessed and exploited.</span><br><span class="line">      </span><br><span class="line">    9.2     保护模式修改为no</span><br><span class="line">        #bind 127.0.0.1</span><br><span class="line">        # Protected mode is a layer of security protection, in order to avoid that</span><br><span class="line">        # Redis instances left open on the internet are accessed and exploited.</span><br><span class="line">        #</span><br><span class="line">        # When protected mode is on and if:</span><br><span class="line">        #</span><br><span class="line">        # 1) The server is not binding explicitly to a set of addresses using the</span><br><span class="line">        #    &quot;bind&quot; directive.</span><br><span class="line">        # 2) No password is configured.</span><br><span class="line">        #</span><br><span class="line">        # The server only accepts connections from clients connecting from the</span><br><span class="line">        # IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><br><span class="line">        # sockets.</span><br><span class="line">        #</span><br><span class="line">        # By default protected mode is enabled. You should disable it only if</span><br><span class="line">        # you are sure you want clients from other hosts to connect to Redis</span><br><span class="line">        # even if no authentication is configured, nor a specific set of interfaces</span><br><span class="line">        # are explicitly listed using the &quot;bind&quot; directive.</span><br><span class="line">        protected-mode no</span><br></pre></td></tr></table></figure><p>    9.3        如果修改端口号，修改这里就可以了，本文默认6379端口<br> <figure class="highlight plain"><figcaption><span>no</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">        # Accept connections on the specified port, default is 6379 (IANA #815344).</span><br><span class="line">        # If port 0 is specified Redis will not listen on a TCP socket.</span><br><span class="line">        port 6379</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>    9.4        修改密码为 111111</p><p>           这个密码为登陆redis所需要的密码，请记好</p><p>        ################################## SECURITY ###################################<br>        # Warning: since Redis is pretty fast an outside user can try up to<br>        # 150k passwords per second against a good box. This means that you should<br>        # use a very strong password otherwise it will be very easy to break.<br>        #<br>        requirepass 111111        </p><p>10.保存并退出编辑重启redis</p><p>systemctl restart redis</p><p>11.进入redis</p><p>    11.1：命令：</p><p>redis-cli -h 127.0.0.1 -p 6379</p><p>    11.2：输入用户名和密码 auth 111111</p><p>    返回OK<br>    11.3：然后再输入    info</p><p>12.获取当前的db数 </p><p>config get databases</p><p>或者</p><p>empty list or set  代表的是当前数据为空，不影响</p><p>  13.切换指定db  select 1  (可为0-15)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.安装redis数据库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>博客美化——Silence主题皮肤</title>
    <link href="https://zhaozheng.link/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E2%80%94%E2%80%94Silence%E4%B8%BB%E9%A2%98%E7%9A%AE%E8%82%A4/"/>
    <id>https://zhaozheng.link/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96%E2%80%94%E2%80%94Silence%E4%B8%BB%E9%A2%98%E7%9A%AE%E8%82%A4/</id>
    <published>2020-08-30T12:08:31.000Z</published>
    <updated>2021-03-17T13:07:04.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;一款专注阅读的博客园主题，主要面向于经常混迹 博客园 的朋友。其追求大道至简的终极真理，界面追求简洁、运行追求高效、部署追求简单。</p><ul><li><a href="https://github.com/glassy-sky-lisong/SilenceSkin">博客皮肤源码地址</a></li><li><a href="https://www.cnblogs.com/esofar">预览地址</a></li><li><a href="https://github.com/esofar/cnblogs-theme-silence/blob/master/docs/deploy.md">如何部署、使用皮肤</a></li><li><a href="https://www.cnblogs.com/esofar/p/cnblogs-theme-silence.html">Silence作者的友链</a></li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>简洁优雅、精致漂亮的 UI 设计</li><li>提供多种风格主题以便适应各类用户的偏好</li><li>响应式设计，兼容手机端浏览器</li><li>提供事无巨细的部署文档</li><li>源码结构清晰并且注释完整，方便扩展</li></ul><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>&emsp;&emsp;请先确保您正在使用的机器已经安装 Node.js 和 Git 客户端。</p><pre><code> git clone https://github.com/esofar/cnblogs-theme-silence.git   # 克隆源码 cd cnblogs-theme-silence                                        # 进入项目 npm install                                                     # 安装依赖 npm run build</code></pre><p>&emsp;&emsp;如果没有安装node。js或者不会使用的童鞋可以在我的GitHub，也就是博客皮肤源码地址中。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>&emsp;&emsp;重点部署之前使用博客园的cutorm皮肤，具体部署细节请详见’如何部署、使用皮肤’，如果又不会的话可以看一看我的配置作为参考（仅作为参考，找不回来别哭鼻子）<br><em><strong>CSS</strong></em></p><pre><code>&lt;!-- 溢出隐藏设置（放置在管理--&gt; 设置--&gt; css模块中） --&gt;#topics, #mainContent &#123;    overflow: visible;&#125;.cnblogs-markdown .hljs&#123;    display:block;    color:#333;    overflow-x:auto;    background:#F2F4F5!important;    border:none!important;    font-family:Consolas,Monaco,&#39;Andale Mono&#39;,&#39;Ubuntu Mono&#39;,monospace!important;    padding:1em!important;    font-size:14px!important    &#125;</code></pre><p><em><strong>侧边栏公告</strong></em></p><pre><code>&lt;!-- 在管理--&gt; 设置-&gt; 侧边栏公告(支持js代码、支持html代码) --&gt;&lt;script src=&quot;https://blog-static.cnblogs.com/files/glassysky/silence.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    $.silence(&#123;        profile: &#123;            enable: true,            avatar: &#39;https://gitee.com/glassyskyforgame/glassysky/blob/master/4c67d1a20cf431ade2873e284836acaf2fdd989e.jpg&#39;,            favicon: &#39;https://gitee.com/glassyskyforgame/glassysky/raw/master/4c67d1a20cf431ade2873e284836acaf2fdd989e.jpg&#39;,        &#125;,        catalog: &#123;            enable: true,            move: true,            index: true,            level1: &#39;h2&#39;,            level2: &#39;h3&#39;,            level3: &#39;h4&#39;,        &#125;,        signature: &#123;            enable: true,            home: &#39;https://www.cnblogs.com/glassysky/&#39;,            license: &#39;署名 4.0 国际&#39;,            link: &#39;https://creativecommons.org/licenses/by/4.0&#39;        &#125;,        reward: &#123;            enable: true,            title: &#39;感谢小可爱投食&#39;,            wechat: &#39;https://images.cnblogs.com/cnblogs_com/esofar/972540/o_wechat.png&#39;,            alipay: &#39;https://images.cnblogs.com/cnblogs_com/esofar/972540/o_alipay.png&#39;        &#125;,        github: &#123;            enable: true,            color: &#39;#fff&#39;,            fill: null,            link: &#39;https://github.com/glassy-sky-lisong&#39;        &#125;    &#125;);&lt;/script&gt;&lt;!--外置主题css补丁--&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://blog-static.cnblogs.com/files/glassysky/sli.css&quot;/&gt;</code></pre><p><em><strong>会动的title</strong></em></p><pre><code>&lt;!-- 动态titlejs --&gt;&lt;script&gt; var OriginTitle = document.title; var titleTime; document.addEventListener(&#39;visibilitychange&#39;, function () &#123; if                 (document.hidden) &#123; document.title = &#39;╭(°A°`)╮ 页面崩溃啦 ~&#39;; clearTimeout(titleTime); &#125; else &#123; document.title = &#39;(ฅ&gt;ω&lt;*ฅ) 噫又    好了~&#39; + OriginTitle; titleTime = setTimeout(function () &#123; document.title = OriginTitle; &#125;, 2000); &#125; &#125;); &lt;/script&gt;</code></pre><p><em><strong>图片放大功能</strong></em></p><pre><code>&lt;!--图片放大的zoomcss和js--&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://blog-static.cnblogs.com/files/glassysky/zoom.css&quot;/&gt;&lt;script src=&quot;https://blog-static.cnblogs.com/files/glassysky/zoom.js&quot;&gt;&lt;/script&gt;&lt;!-- Bootstrap 的 transition.js cdn（过渡动画插件）--&gt;&lt;script type=&quot;text/javascript&quot;&gt;$(&#39;#cnblogs_post_body img&#39;).attr(&#39;data-action&#39;, &#39;zoom&#39;);&lt;/script&gt;</code></pre><h2 id="博客的皮肤风格"><a href="#博客的皮肤风格" class="headerlink" title="博客的皮肤风格"></a>博客的皮肤风格</h2><ul><li>简约·蓝<br><img src= "/img/loading1.gif" data-lazy-src="https://github.com/esofar/cnblogs-theme-silence/raw/master/docs/theme_default.png" alt="img1"> </li><li>暗黑·绿<br><img src= "/img/loading1.gif" data-lazy-src="https://github.com/esofar/cnblogs-theme-silence/raw/master/docs/theme_dark.png" alt="img2"></li><li>女神·粉<br><img src= "/img/loading1.gif" data-lazy-src="https://github.com/esofar/cnblogs-theme-silence/raw/master/docs/theme_goddess.png" alt="img3">  </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;一款专注阅读的博客园主题，主要面向于经常混迹 博客园 的朋友。其追求大道至简的终极真理，界面追求简洁、运行追求高效、</summary>
      
    
    
    
    <category term="博客园博文" scheme="https://zhaozheng.link/categories/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E5%8D%9A%E6%96%87/"/>
    
    <category term="博客美化" scheme="https://zhaozheng.link/categories/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E5%8D%9A%E6%96%87/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
    
    <category term="博客园" scheme="https://zhaozheng.link/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"/>
    
    <category term="博客美化" scheme="https://zhaozheng.link/tags/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>浏览器中实现直播</title>
    <link href="https://zhaozheng.link/%E7%9B%B4%E6%92%ADflv/"/>
    <id>https://zhaozheng.link/%E7%9B%B4%E6%92%ADflv/</id>
    <published>2020-08-30T12:08:31.000Z</published>
    <updated>2021-04-02T03:46:31.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视频直播"><a href="#视频直播" class="headerlink" title="视频直播"></a>视频直播</h1><h3 id="一，概念部分"><a href="#一，概念部分" class="headerlink" title="一，概念部分"></a>一，概念部分</h3><h3 id="视频直播分为几部分"><a href="#视频直播分为几部分" class="headerlink" title="视频直播分为几部分"></a>视频直播分为几部分</h3><ul><li><p>推流：</p><ul><li>就是将你现在直播的内容分成好几段一段一段的打包好，格式是.flv<br>这个flv格式的比较简单轻量，加载速度快，播放也快<br>这里我使用的软件是OBS，下载地址是：<a href="https://obsproject.com/zh-cn">https://obsproject.com/zh-cn</a>   </li></ul></li><li><p>拉流：</p><ul><li>就是拉取打包好的视频将它拼接起来播放给用户，这里我用的是Vlc，下载地址是 <a href="https://www.videolan.org/vlc/">https://www.videolan.org/vlc/</a><br>这里呢，我是用的HTTP-FLV直播协议<h3 id="HTTP-FLV的优缺点"><a href="#HTTP-FLV的优缺点" class="headerlink" title="HTTP-FLV的优缺点"></a>HTTP-FLV的优缺点</h3></li></ul></li><li><p>优点: </p><ul><li>可以直接通过http协议进行传输，http属于公共协议，公共端口：80<br>html播放视频就很简单， video<br>支持加密，使用https<br>兼容移动端设备，比如：安卓、ios</li></ul></li><li><p>缺点: </p><ul><li>会缓存直播数据，保存直播传输过来的一段段flv文件，隐私保密不好<br>不能在大并发情况下使用<br>二，应用场景<br>其实这个视频直播在很多大平台虎牙，斗鱼，抖音，快手等等，都是有这个功能的。比如你的项目需要用到直播，真人讲解就可以应用这个。</li></ul></li></ul><p>三，代码实现</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/nginx-flv</span><br><span class="line"># 创建了一个安装目录</span><br><span class="line">mkdir /home/flv-tools</span><br><span class="line"># 存储所需软件</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载这个文件</span></span><br><span class="line">wget https://nginx.org/download/nginx-<span class="number">1.18</span><span class="number">.0</span>.tar.gz</span><br><span class="line">git clone https://github.com/winshining/nginx-http-flv-module</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压这两个文件</span></span><br><span class="line">tar -zxvf nginx-<span class="number">1.18</span><span class="number">.0</span>.tar.gz nginx-<span class="number">1.18</span><span class="number">.0</span></span><br><span class="line">unzip nginx-http-flv-module.<span class="built_in">zip</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">cd nginx-<span class="number">1.18</span><span class="number">.0</span></span><br><span class="line">./configure --prefix=/usr/local/nginx-flv --add-module=/home/flv-tools/nginx-http-flv-module-master</span><br><span class="line"><span class="comment"># --prefix: 配置安装路径</span></span><br><span class="line"><span class="comment">#--add-module: 添加安装插件</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译及安装</span></span><br><span class="line">make </span><br><span class="line">make install </span><br><span class="line">make &amp;&amp; make install </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对配置文件进行修改</span></span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">rtmp_auto_push on;</span><br><span class="line">rtmp_auto_push_reconnect 1s;</span><br><span class="line">rtmp_socket_dir /tmp;</span><br><span class="line"></span><br><span class="line">rtmp&#123;</span><br><span class="line">out_queue <span class="number">4096</span>;</span><br><span class="line">out_cork <span class="number">8</span>;</span><br><span class="line">max_streams <span class="number">128</span>;</span><br><span class="line">timeout 15s;</span><br><span class="line">drop_idle_publisher 15s;</span><br><span class="line">log_interval 5s;</span><br><span class="line">log_size 1m;</span><br><span class="line">server &#123;</span><br><span class="line">listen <span class="number">1935</span>; <span class="comment"># 推流端口</span></span><br><span class="line">server_name zege;</span><br><span class="line"></span><br><span class="line">application live &#123;<span class="comment"># 配置推流地址</span></span><br><span class="line">live on; <span class="comment"># 打开推流</span></span><br><span class="line"><span class="comment"># gop_cache on;</span></span><br><span class="line"><span class="comment"># rtmp://123.123.123.123:1935/live/test</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置文件http拉流部分</span></span><br><span class="line">http &#123;</span><br><span class="line">include       mime.types;</span><br><span class="line">default_type  application/octet-stream;</span><br><span class="line">sendfile        on;</span><br><span class="line">keepalive_timeout  <span class="number">65</span>;</span><br><span class="line">server &#123;</span><br><span class="line">listen       <span class="number">8080</span>; <span class="comment"># 拉流通过8080去拉流</span></span><br><span class="line"><span class="comment"># http://123.123.123.123:8080/live/?port=1935&amp;stream=test</span></span><br><span class="line">server_name  localhost;</span><br><span class="line">location /live &#123;</span><br><span class="line">flv_live on;</span><br><span class="line">chunked_transfer_encoding  on;</span><br><span class="line">add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="必须确保服务开启，还有阿里云的防火墙，这个很重要"><a href="#必须确保服务开启，还有阿里云的防火墙，这个很重要" class="headerlink" title="必须确保服务开启，还有阿里云的防火墙，这个很重要"></a>必须确保服务开启，还有阿里云的防火墙，这个很重要</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭服务</span></span><br><span class="line">/usr/local/nginx-rtmp/sbin/nginx -s stop</span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">/usr/local/nginx-rtmp/sbin/nginx -s reload</span><br><span class="line"><span class="comment"># 打开服务</span></span><br><span class="line">/usr/local/nginx-flv/sbin/nginx -c /usr/local/nginx-flv/conf/nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在软件中设置推流地址和拉流地址</span></span><br><span class="line">rtmp://（自己的云主机端口）:<span class="number">1935</span>/live/test</span><br><span class="line"></span><br><span class="line">http://(自己云主机端口):8080/live?port=1935&amp;app=live&amp;stream=test</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最后在vue中实现拉流</span></span><br><span class="line"><span class="comment">// 下载依赖</span></span><br><span class="line">cnpm install flv.js --save</span><br><span class="line"><span class="comment">// 在需要的页面导包</span></span><br><span class="line"><span class="keyword">import</span> flv <span class="keyword">from</span> <span class="string">&#x27;flv.js&#x27;</span>;</span><br><span class="line"><span class="comment">// 构建播放标签</span></span><br><span class="line">&lt;video id=<span class="string">&quot;videoElement&quot;</span> controls muted&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/video&gt;</span><br><span class="line"><span class="comment">// 进行初始化</span></span><br><span class="line">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> videoElement = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;videoElement&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> flvPlayer = flv.createPlayer(&#123;</span><br><span class="line">      type: <span class="string">&#x27;flv&#x27;</span>,</span><br><span class="line">      enableWorker: <span class="literal">true</span>,     <span class="comment">//浏览器端开启flv.js的worker,多进程运行flv.js</span></span><br><span class="line">      isLive: <span class="literal">true</span>,           <span class="comment">//直播模式</span></span><br><span class="line">      hasAudio: <span class="literal">false</span>,        <span class="comment">//关闭音频</span></span><br><span class="line">      hasVideo: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// cors: true,</span></span><br><span class="line">      stashInitialSize: <span class="number">128</span>,</span><br><span class="line">      enableStashBuffer: <span class="literal">false</span>, <span class="comment">//播放flv时，设置是否启用播放缓存，只在直播起作用。</span></span><br><span class="line">      url: <span class="string">&#x27;http://（自己云主机端口）/live?port=1935&amp;app=live&amp;stream=test&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    flvPlayer.attachMediaElement(videoElement);</span><br><span class="line">    flvPlayer.load();</span><br><span class="line">    flvPlayer.play();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;视频直播&quot;&gt;&lt;a href=&quot;#视频直播&quot; class=&quot;headerlink&quot; title=&quot;视频直播&quot;&gt;&lt;/a&gt;视频直播&lt;/h1&gt;&lt;h3 id=&quot;一，概念部分&quot;&gt;&lt;a href=&quot;#一，概念部分&quot; class=&quot;headerlink&quot; title=&quot;一，概念部</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>测试分类</title>
    <link href="https://zhaozheng.link/%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB/"/>
    <id>https://zhaozheng.link/%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB/</id>
    <published>2020-08-25T04:50:00.000Z</published>
    <updated>2021-03-17T13:07:04.620Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个测试</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla</summary>
      
    
    
    
    <category term="Hexo" scheme="https://zhaozheng.link/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://zhaozheng.link/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>支付宝三方支付流程</title>
    <link href="https://zhaozheng.link/%E6%94%AF%E4%BB%98%E5%AE%9D%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B/"/>
    <id>https://zhaozheng.link/%E6%94%AF%E4%BB%98%E5%AE%9D%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B/</id>
    <published>2020-07-02T12:08:31.000Z</published>
    <updated>2021-04-02T03:46:08.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="支付宝三方支付"><a href="#支付宝三方支付" class="headerlink" title="支付宝三方支付"></a>支付宝三方支付</h1><h3 id="一-下载一个支付宝开放平台开发助手生成秘钥"><a href="#一-下载一个支付宝开放平台开发助手生成秘钥" class="headerlink" title="一,下载一个支付宝开放平台开发助手生成秘钥"></a>一,下载一个支付宝开放平台开发助手生成秘钥</h3><h3 id="进入-https-www-alipay-com-并登陆-然后注册一个沙箱"><a href="#进入-https-www-alipay-com-并登陆-然后注册一个沙箱" class="headerlink" title="进入 https://www.alipay.com/ 并登陆,然后注册一个沙箱"></a>进入 <a href="https://www.alipay.com/">https://www.alipay.com/</a> 并登陆,然后注册一个沙箱</h3><h3 id="下载-pip-install-python-alipay-sdk-–upgrade-模块"><a href="#下载-pip-install-python-alipay-sdk-–upgrade-模块" class="headerlink" title="下载 pip install python-alipay-sdk –upgrade 模块"></a>下载 pip install python-alipay-sdk –upgrade 模块</h3><p>流程图:<br><img src= "/img/loading1.gif" data-lazy-src="https://i.loli.net/2021/01/30/QElYTGVxfKyX9P5.png" alt="支付宝支付流程图.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 将刚下载的模块中导出需要用的包</span></span><br><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"><span class="keyword">from</span> alipay.utils <span class="keyword">import</span> AliPayConfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开发一个支付接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlipayView</span>(<span class="params">APIView</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        sn = request.data.get(<span class="string">&quot;sn&quot;</span>)</span><br><span class="line">        total = request.data.get(<span class="string">&quot;total&quot;</span>)</span><br><span class="line">        <span class="comment"># 获取秘钥信息</span></span><br><span class="line">        app_private_key_string = <span class="built_in">open</span>(<span class="string">&quot;buyapp/alipay/app_private_key.txt&quot;</span>).read()</span><br><span class="line">        alipay_public_key_string = <span class="built_in">open</span>(<span class="string">&quot;buyapp/alipay/alipay_public_key.txt&quot;</span>).read()</span><br><span class="line"></span><br><span class="line">        alipay = AliPay(</span><br><span class="line">            appid=<span class="string">&quot;2016101600696807&quot;</span>,</span><br><span class="line">            app_notify_url=<span class="literal">None</span>,  <span class="comment"># 默认回调url</span></span><br><span class="line">            app_private_key_string=app_private_key_string,</span><br><span class="line">            <span class="comment"># 支付宝的公钥，验证支付宝回传消息使用，不是你自己的公钥,</span></span><br><span class="line">            alipay_public_key_string=alipay_public_key_string,</span><br><span class="line">            sign_type=<span class="string">&quot;RSA2&quot;</span>,  <span class="comment"># RSA 或者 RSA2</span></span><br><span class="line">            debug=<span class="literal">True</span>,  <span class="comment"># 默认False</span></span><br><span class="line">            config=AliPayConfig(timeout=<span class="number">15</span>)  <span class="comment"># 可选, 请求超时时间</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果你是 Python 3的用户，使用默认的字符串即可</span></span><br><span class="line">        subject = <span class="string">&quot;阿正商城订单支付&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span></span><br><span class="line">        order_string = alipay.api_alipay_trade_page_pay(</span><br><span class="line">            out_trade_no=sn,  <span class="comment"># 订单号</span></span><br><span class="line">            total_amount=total,  <span class="comment"># 总金额</span></span><br><span class="line">            subject=subject,  <span class="comment"># 标题</span></span><br><span class="line">            return_url=<span class="string">&quot;http://localhost:8000/api/v1/buy/pay_callback&quot;</span>,</span><br><span class="line">            <span class="comment"># notify_url=&quot;https://example.com/notify&quot;  # 可选, 不填则使用默认notify url</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成一个支付超链接，返回给vue端， 点击就激活这个超链接</span></span><br><span class="line">        url = <span class="string">&quot;https://openapi.alipaydev.com/gateway.do?&quot;</span> + order_string</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;url&quot;</span>: url&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置回调地址</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliPayBackView</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        user = request.user</span><br><span class="line">        <span class="comment"># 获取回调的信息</span></span><br><span class="line">        <span class="comment"># 获取 订单号</span></span><br><span class="line">        sn = request.GET.get(<span class="string">&quot;out_trade_no&quot;</span>)</span><br><span class="line">        <span class="comment">#  获取 支付宝交易号</span></span><br><span class="line">        trade_no = request.GET.get(<span class="string">&quot;trade_no&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sn:&quot;</span>, sn)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;trade_no:&quot;</span>, trade_no)</span><br><span class="line">        <span class="comment"># 找到这个订单 并更新状态</span></span><br><span class="line">        <span class="comment"># 修改了  订单状态  并添加了 支付宝交易号</span></span><br><span class="line">        Order.objects.<span class="built_in">filter</span>(sn=sn).update(trade_no=trade_no, status=<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#  删除我们购物车中的 已经支付成功的购物信息</span></span><br><span class="line">        <span class="built_in">print</span>(user)</span><br><span class="line">        <span class="comment"># 查询所有的选中 然后删除</span></span><br><span class="line">        gid_set = r.smembers(<span class="string">&quot;select_%d&quot;</span> % user.<span class="built_in">id</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;gid_set:&quot;</span>, gid_set)</span><br><span class="line">        <span class="keyword">for</span> gid <span class="keyword">in</span> gid_set:</span><br><span class="line">            r.hdel(<span class="string">&quot;cart_%d&quot;</span> % user.<span class="built_in">id</span>, gid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;http://127.0.0.1:8080/#/paysuccess?trade_no=&quot;</span> + trade_no)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最后配置路由即可"><a href="#最后配置路由即可" class="headerlink" title="最后配置路由即可"></a>最后配置路由即可</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;支付宝三方支付&quot;&gt;&lt;a href=&quot;#支付宝三方支付&quot; class=&quot;headerlink&quot; title=&quot;支付宝三方支付&quot;&gt;&lt;/a&gt;支付宝三方支付&lt;/h1&gt;&lt;h3 id=&quot;一-下载一个支付宝开放平台开发助手生成秘钥&quot;&gt;&lt;a href=&quot;#一-下载一个支付宝开放平</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>celery异步案例</title>
    <link href="https://zhaozheng.link/celery%E5%BC%82%E6%AD%A5/"/>
    <id>https://zhaozheng.link/celery%E5%BC%82%E6%AD%A5/</id>
    <published>2020-04-30T12:08:31.000Z</published>
    <updated>2021-04-02T03:47:08.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="celery异步框架"><a href="#celery异步框架" class="headerlink" title="celery异步框架"></a>celery异步框架</h1><p>一，celery是什么？</p><ul><li>celery是一个简单、灵活，可靠的，处理大量消息的分布式系统。它专注于实时处理的异步任务队列，同时也支持任务调度,celery是Python实现的分布式队列</li><li><a href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a> 中文版官方文档</li></ul><p>二，celery的特点及应用场景：</p><ul><li>开源，速度快，高可用，灵活</li><li>应用场景就是我们对于代码中耗时长的功能，可以异步操作，不影响我们对客户端的响应</li></ul><p>三，代码实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装三个包</span></span><br><span class="line"> pip install -U Celery</span><br><span class="line"> pip install redis</span><br><span class="line"> pip install eventlet</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个tasks文件在这里面定义初始化任务</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line">app = Celery(<span class="string">&quot;taks&quot;</span>, broker=<span class="string">&quot;redis://localhost/1&quot;</span>)</span><br><span class="line"><span class="meta">@app.task()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendSMS</span>(<span class="params">phone, code</span>):</span></span><br><span class="line">    <span class="comment"># 定义你自己的任务</span></span><br><span class="line">     <span class="keyword">return</span> a + b </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行celery worker 服务器(看你自己的app)</span></span><br><span class="line"> celery -A userapp.tasks worker --loglevel=INFO</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在view视图里调用异步任务</span></span><br><span class="line"><span class="comment">#(以你自己定义的函数名为准)</span></span><br><span class="line"> sendSMS.delay()</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>安装依赖完以后,去自己的app下创建一个新的文件,在文件中定义一个函数,这个函数里面将是你给他的任务,然后通过 celery -A 自己app名.tasks worker –loglevel=INFO 这条命令来启动这个服务,最后在你的view视图里导包调用这个函数即可</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;celery异步框架&quot;&gt;&lt;a href=&quot;#celery异步框架&quot; class=&quot;headerlink&quot; title=&quot;celery异步框架&quot;&gt;&lt;/a&gt;celery异步框架&lt;/h1&gt;&lt;p&gt;一，celery是什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;celery是一个简单、</summary>
      
    
    
    
    
  </entry>
  
</feed>
